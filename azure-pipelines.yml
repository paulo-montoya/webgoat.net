# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- master

pool:
  vmImage: 'windows-2019'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  FOD_API_BASE: 'https://api.ams.fortify.com'   # AMS; use emea/apac base if needed
  FOD_RELEASE_ID: '945671'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
- task: FortifyOnDemandStatic@9
  inputs:
    FortifyProjects: 'WebGoat'
    FodConnection: 'AMS_pjtest'
    ReleaseOptions: '0'
    ReleaseId: 945671
    EntitlementSelection: '1'
    EntitlementPreference: '1'
    OverrideScanSettings: '2'
    InProgressScanActionType: '2'
    RemediationScanPreference: '2'
    BuildType: 'none'
    PollingInterval: 2
    PolicyFailAction: '0'

- powershell: |
    $ErrorActionPreference = 'Stop'
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

    $base   = "$(FOD_API_BASE)"
    $relId  = "$(FOD_RELEASE_ID)"
    $cid    = "$(FOD_CLIENT_ID)"
    $csec   = "$(FOD_CLIENT_SECRET)"

    # --- OAuth Token ---
    Write-Host "Requesting OAuth token..."
    $tokenResp = Invoke-RestMethod -Method Post -Uri "$base/oauth/token" `
      -ContentType 'application/x-www-form-urlencoded' `
      -Body @{
        grant_type='client_credentials'
        scope='api-tenant'
        client_id=$cid
        client_secret=$csec
      }
    $tok = $tokenResp.access_token
    if (-not $tok) { throw "No access_token returned from FoD." }

    # --- Find most recent completed static scan ---
    Write-Host "Fetching scans for release $relId..."
    $scans = Invoke-RestMethod -Method Get -Uri "$base/api/v3/releases/$relId/scans?limit=50" `
      -Headers @{ Authorization = "Bearer $tok" }

    $latest = $scans.items |
      Where-Object { $_.scanType -eq 'Static' -and $_.analysisStatusType -eq 'Completed' } |
      Sort-Object -Property completedDateTime -Descending |
      Select-Object -First 1

    if (-not $latest) { throw "No completed static scans found for release $relId." }

    $scanId = $latest.scanId
    Write-Host "Most recent completed static scanId = $scanId"

    # --- Prepare paths ---
    $outDir = "$(Build.ArtifactStagingDirectory)\FoD"
    New-Item -ItemType Directory -Force -Path $outDir | Out-Null
    $outFile = Join-Path $outDir ("scan-$scanId.fpr")

    # --- Download with retries ---
    $maxRetries = 30      # ~30 minutes
    $retryDelay = 60      # 60 seconds
    $attempt = 0
    $success = $false

    while ($attempt -lt $maxRetries) {
      Write-Host "Attempt $($attempt+1): downloading FPR for scanId=$scanId..."
      $resp = Invoke-WebRequest -Method Get -Uri "$base/api/v3/scans/$scanId/fpr" `
        -Headers @{ Authorization = "Bearer $tok" } -UseBasicParsing

      if ($resp.ContentType -like "application/json*") {
        Write-Host "Got JSON instead of FPR, likely not ready yet."
        try {
          $json = $resp.Content | ConvertFrom-Json
          Write-Host "Response: $($json | ConvertTo-Json -Compress)"
        } catch {
          Write-Host "Non-FPR response: $($resp.Content)"
        }
        Start-Sleep -Seconds $retryDelay
        $attempt++
      }
      else {
        # Save raw bytes
        [System.IO.File]::WriteAllBytes($outFile, $resp.Content)
        $size = (Get-Item $outFile).Length
        Write-Host "FPR saved to $outFile (size = $size bytes)"

        if ($size -lt 50000) {
          Write-Host "Downloaded file too small (<50 KB), retrying..."
          Remove-Item $outFile -Force
          Start-Sleep -Seconds $retryDelay
          $attempt++
        }
        else {
          $success = $true
          break
        }
      }
    }

    if (-not $success) {
      throw "Failed to download valid FPR after $maxRetries attempts."
    }
  displayName: "Download FoD FPR (with retry until valid)"
  env:
    FOD_CLIENT_ID: $(FOD_CLIENT_ID)
    FOD_CLIENT_SECRET: $(FOD_CLIENT_SECRET)


- task: PublishBuildArtifacts@1
  displayName: "Publish FoD FPR artifact"
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\FoD'
    ArtifactName: 'fod-fpr'
    publishLocation: 'Container'

